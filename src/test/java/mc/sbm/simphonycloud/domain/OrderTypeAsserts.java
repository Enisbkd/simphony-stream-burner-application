package mc.sbm.simphonycloud.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OrderTypeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderTypeAllPropertiesEquals(OrderType expected, OrderType actual) {
        assertOrderTypeAutoGeneratedPropertiesEquals(expected, actual);
        assertOrderTypeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderTypeAllUpdatablePropertiesEquals(OrderType expected, OrderType actual) {
        assertOrderTypeUpdatableFieldsEquals(expected, actual);
        assertOrderTypeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderTypeAutoGeneratedPropertiesEquals(OrderType expected, OrderType actual) {
        assertThat(actual)
            .as("Verify OrderType auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderTypeUpdatableFieldsEquals(OrderType expected, OrderType actual) {
        assertThat(actual)
            .as("Verify OrderType relevant properties")
            .satisfies(a -> assertThat(a.getNum()).as("check num").isEqualTo(expected.getNum()))
            .satisfies(a -> assertThat(a.getLocRef()).as("check locRef").isEqualTo(expected.getLocRef()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getMstrNum()).as("check mstrNum").isEqualTo(expected.getMstrNum()))
            .satisfies(a -> assertThat(a.getMstrName()).as("check mstrName").isEqualTo(expected.getMstrName()))
            .satisfies(a -> assertThat(a.getCatGrpHierName1()).as("check catGrpHierName1").isEqualTo(expected.getCatGrpHierName1()))
            .satisfies(a -> assertThat(a.getCatGrpName1()).as("check catGrpName1").isEqualTo(expected.getCatGrpName1()))
            .satisfies(a -> assertThat(a.getCatGrpHierName2()).as("check catGrpHierName2").isEqualTo(expected.getCatGrpHierName2()))
            .satisfies(a -> assertThat(a.getCatGrpName2()).as("check catGrpName2").isEqualTo(expected.getCatGrpName2()))
            .satisfies(a -> assertThat(a.getCatGrpHierName3()).as("check catGrpHierName3").isEqualTo(expected.getCatGrpHierName3()))
            .satisfies(a -> assertThat(a.getCatGrpName3()).as("check catGrpName3").isEqualTo(expected.getCatGrpName3()))
            .satisfies(a -> assertThat(a.getCatGrpHierName4()).as("check catGrpHierName4").isEqualTo(expected.getCatGrpHierName4()))
            .satisfies(a -> assertThat(a.getCatGrpName4()).as("check catGrpName4").isEqualTo(expected.getCatGrpName4()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderTypeUpdatableRelationshipsEquals(OrderType expected, OrderType actual) {
        // empty method
    }
}
