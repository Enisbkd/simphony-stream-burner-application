package mc.sbm.simphonycloud.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CheckTransAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCheckTransAllPropertiesEquals(CheckTrans expected, CheckTrans actual) {
        assertCheckTransAutoGeneratedPropertiesEquals(expected, actual);
        assertCheckTransAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCheckTransAllUpdatablePropertiesEquals(CheckTrans expected, CheckTrans actual) {
        assertCheckTransUpdatableFieldsEquals(expected, actual);
        assertCheckTransUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCheckTransAutoGeneratedPropertiesEquals(CheckTrans expected, CheckTrans actual) {
        assertThat(actual)
            .as("Verify CheckTrans auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCheckTransUpdatableFieldsEquals(CheckTrans expected, CheckTrans actual) {
        assertThat(actual)
            .as("Verify CheckTrans relevant properties")
            .satisfies(a -> assertThat(a.getRvcRef()).as("check rvcRef").isEqualTo(expected.getRvcRef()))
            .satisfies(a -> assertThat(a.getCheckRef()).as("check checkRef").isEqualTo(expected.getCheckRef()))
            .satisfies(a -> assertThat(a.getCheckNumber()).as("check checkNumber").isEqualTo(expected.getCheckNumber()))
            .satisfies(a -> assertThat(a.getCheckName()).as("check checkName").isEqualTo(expected.getCheckName()))
            .satisfies(a -> assertThat(a.getCheckEmployeeRef()).as("check checkEmployeeRef").isEqualTo(expected.getCheckEmployeeRef()))
            .satisfies(a -> assertThat(a.getOrderTypeRef()).as("check orderTypeRef").isEqualTo(expected.getOrderTypeRef()))
            .satisfies(a -> assertThat(a.getOrderChannelRef()).as("check orderChannelRef").isEqualTo(expected.getOrderChannelRef()))
            .satisfies(a -> assertThat(a.getTableName()).as("check tableName").isEqualTo(expected.getTableName()))
            .satisfies(a -> assertThat(a.getTableGroupNumber()).as("check tableGroupNumber").isEqualTo(expected.getTableGroupNumber()))
            .satisfies(a -> assertThat(a.getOpenTime()).as("check openTime").isEqualTo(expected.getOpenTime()))
            .satisfies(a -> assertThat(a.getGuestCount()).as("check guestCount").isEqualTo(expected.getGuestCount()))
            .satisfies(a -> assertThat(a.getLanguage()).as("check language").isEqualTo(expected.getLanguage()))
            .satisfies(a -> assertThat(a.getIsTrainingCheck()).as("check isTrainingCheck").isEqualTo(expected.getIsTrainingCheck()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getPreparationStatus()).as("check preparationStatus").isEqualTo(expected.getPreparationStatus()))
            .satisfies(a -> assertThat(a.getSubtotal()).as("check subtotal").isEqualTo(expected.getSubtotal()))
            .satisfies(a ->
                assertThat(a.getSubtotalDiscountTotal()).as("check subtotalDiscountTotal").isEqualTo(expected.getSubtotalDiscountTotal())
            )
            .satisfies(a ->
                assertThat(a.getAutoServiceChargeTotal()).as("check autoServiceChargeTotal").isEqualTo(expected.getAutoServiceChargeTotal())
            )
            .satisfies(a -> assertThat(a.getServiceChargeTotal()).as("check serviceChargeTotal").isEqualTo(expected.getServiceChargeTotal())
            )
            .satisfies(a -> assertThat(a.getTaxTotal()).as("check taxTotal").isEqualTo(expected.getTaxTotal()))
            .satisfies(a -> assertThat(a.getPaymentTotal()).as("check paymentTotal").isEqualTo(expected.getPaymentTotal()))
            .satisfies(a -> assertThat(a.getTotalDue()).as("check totalDue").isEqualTo(expected.getTotalDue()))
            .satisfies(a -> assertThat(a.getTaxRateId()).as("check taxRateId").isEqualTo(expected.getTaxRateId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCheckTransUpdatableRelationshipsEquals(CheckTrans expected, CheckTrans actual) {
        // empty method
    }
}
