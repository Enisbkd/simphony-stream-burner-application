package mc.sbm.simphonycloud.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TaxeRateTransAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaxeRateTransAllPropertiesEquals(TaxeRateTrans expected, TaxeRateTrans actual) {
        assertTaxeRateTransAutoGeneratedPropertiesEquals(expected, actual);
        assertTaxeRateTransAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaxeRateTransAllUpdatablePropertiesEquals(TaxeRateTrans expected, TaxeRateTrans actual) {
        assertTaxeRateTransUpdatableFieldsEquals(expected, actual);
        assertTaxeRateTransUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaxeRateTransAutoGeneratedPropertiesEquals(TaxeRateTrans expected, TaxeRateTrans actual) {
        assertThat(actual)
            .as("Verify TaxeRateTrans auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaxeRateTransUpdatableFieldsEquals(TaxeRateTrans expected, TaxeRateTrans actual) {
        assertThat(actual)
            .as("Verify TaxeRateTrans relevant properties")
            .satisfies(a -> assertThat(a.getOrgShortName()).as("check orgShortName").isEqualTo(expected.getOrgShortName()))
            .satisfies(a -> assertThat(a.getLocRef()).as("check locRef").isEqualTo(expected.getLocRef()))
            .satisfies(a -> assertThat(a.getRvcRef()).as("check rvcRef").isEqualTo(expected.getRvcRef()))
            .satisfies(a -> assertThat(a.getTaxRateId()).as("check taxRateId").isEqualTo(expected.getTaxRateId()))
            .satisfies(a -> assertThat(a.getPercentage()).as("check percentage").isEqualTo(expected.getPercentage()))
            .satisfies(a -> assertThat(a.getTaxType()).as("check taxType").isEqualTo(expected.getTaxType()))
            .satisfies(a -> assertThat(a.getNameFR()).as("check nameFR").isEqualTo(expected.getNameFR()))
            .satisfies(a -> assertThat(a.getNameEN()).as("check nameEN").isEqualTo(expected.getNameEN()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaxeRateTransUpdatableRelationshipsEquals(TaxeRateTrans expected, TaxeRateTrans actual) {
        // empty method
    }
}
