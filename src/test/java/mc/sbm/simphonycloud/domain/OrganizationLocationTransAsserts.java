package mc.sbm.simphonycloud.domain;

import static mc.sbm.simphonycloud.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class OrganizationLocationTransAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganizationLocationTransAllPropertiesEquals(
        OrganizationLocationTrans expected,
        OrganizationLocationTrans actual
    ) {
        assertOrganizationLocationTransAutoGeneratedPropertiesEquals(expected, actual);
        assertOrganizationLocationTransAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganizationLocationTransAllUpdatablePropertiesEquals(
        OrganizationLocationTrans expected,
        OrganizationLocationTrans actual
    ) {
        assertOrganizationLocationTransUpdatableFieldsEquals(expected, actual);
        assertOrganizationLocationTransUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganizationLocationTransAutoGeneratedPropertiesEquals(
        OrganizationLocationTrans expected,
        OrganizationLocationTrans actual
    ) {
        assertThat(actual)
            .as("Verify OrganizationLocationTrans auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganizationLocationTransUpdatableFieldsEquals(
        OrganizationLocationTrans expected,
        OrganizationLocationTrans actual
    ) {
        assertThat(actual)
            .as("Verify OrganizationLocationTrans relevant properties")
            .satisfies(a -> assertThat(a.getOrgShortName()).as("check orgShortName").isEqualTo(expected.getOrgShortName()))
            .satisfies(a -> assertThat(a.getLocRef()).as("check locRef").isEqualTo(expected.getLocRef()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getCurrency()).as("check currency").isEqualTo(expected.getCurrency()))
            .satisfies(a -> assertThat(a.getPhoneNumber()).as("check phoneNumber").isEqualTo(expected.getPhoneNumber()))
            .satisfies(a -> assertThat(a.getLanguages()).as("check languages").isEqualTo(expected.getLanguages()))
            .satisfies(a -> assertThat(a.getTimezoneIanaName()).as("check timezoneIanaName").isEqualTo(expected.getTimezoneIanaName()))
            .satisfies(a ->
                assertThat(a.getTimezoneWindowsName()).as("check timezoneWindowsName").isEqualTo(expected.getTimezoneWindowsName())
            )
            .satisfies(a -> assertThat(a.getTimezoneTzIndex()).as("check timezoneTzIndex").isEqualTo(expected.getTimezoneTzIndex()))
            .satisfies(a -> assertThat(a.getAddressLine1()).as("check addressLine1").isEqualTo(expected.getAddressLine1()))
            .satisfies(a -> assertThat(a.getAddressLine2()).as("check addressLine2").isEqualTo(expected.getAddressLine2()))
            .satisfies(a -> assertThat(a.getAddressFloor()).as("check addressFloor").isEqualTo(expected.getAddressFloor()))
            .satisfies(a -> assertThat(a.getAddressLocality()).as("check addressLocality").isEqualTo(expected.getAddressLocality()))
            .satisfies(a -> assertThat(a.getAddressRegion()).as("check addressRegion").isEqualTo(expected.getAddressRegion()))
            .satisfies(a -> assertThat(a.getAddressPostalCode()).as("check addressPostalCode").isEqualTo(expected.getAddressPostalCode()))
            .satisfies(a -> assertThat(a.getAddressCountry()).as("check addressCountry").isEqualTo(expected.getAddressCountry()))
            .satisfies(a -> assertThat(a.getAddressNotes()).as("check addressNotes").isEqualTo(expected.getAddressNotes()))
            .satisfies(a ->
                assertThat(a.getGeoLatitude())
                    .as("check geoLatitude")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getGeoLatitude())
            )
            .satisfies(a ->
                assertThat(a.getGeoLongitude())
                    .as("check geoLongitude")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getGeoLongitude())
            )
            .satisfies(a -> assertThat(a.getPosPlatformName()).as("check posPlatformName").isEqualTo(expected.getPosPlatformName()))
            .satisfies(a -> assertThat(a.getPosPlatformVersion()).as("check posPlatformVersion").isEqualTo(expected.getPosPlatformVersion())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganizationLocationTransUpdatableRelationshipsEquals(
        OrganizationLocationTrans expected,
        OrganizationLocationTrans actual
    ) {
        // empty method
    }
}
