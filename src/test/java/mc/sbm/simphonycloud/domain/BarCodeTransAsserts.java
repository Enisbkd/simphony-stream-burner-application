package mc.sbm.simphonycloud.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BarCodeTransAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBarCodeTransAllPropertiesEquals(BarCodeTrans expected, BarCodeTrans actual) {
        assertBarCodeTransAutoGeneratedPropertiesEquals(expected, actual);
        assertBarCodeTransAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBarCodeTransAllUpdatablePropertiesEquals(BarCodeTrans expected, BarCodeTrans actual) {
        assertBarCodeTransUpdatableFieldsEquals(expected, actual);
        assertBarCodeTransUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBarCodeTransAutoGeneratedPropertiesEquals(BarCodeTrans expected, BarCodeTrans actual) {
        assertThat(actual)
            .as("Verify BarCodeTrans auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBarCodeTransUpdatableFieldsEquals(BarCodeTrans expected, BarCodeTrans actual) {
        assertThat(actual)
            .as("Verify BarCodeTrans relevant properties")
            .satisfies(a -> assertThat(a.getLocRef()).as("check locRef").isEqualTo(expected.getLocRef()))
            .satisfies(a -> assertThat(a.getRvcRef()).as("check rvcRef").isEqualTo(expected.getRvcRef()))
            .satisfies(a -> assertThat(a.getBarcodeId()).as("check barcodeId").isEqualTo(expected.getBarcodeId()))
            .satisfies(a -> assertThat(a.getBarcode()).as("check barcode").isEqualTo(expected.getBarcode()))
            .satisfies(a -> assertThat(a.getMenuItemId()).as("check menuItemId").isEqualTo(expected.getMenuItemId()))
            .satisfies(a -> assertThat(a.getDefenitionSequence()).as("check defenitionSequence").isEqualTo(expected.getDefenitionSequence())
            )
            .satisfies(a -> assertThat(a.getPrice()).as("check price").isEqualTo(expected.getPrice()))
            .satisfies(a -> assertThat(a.getPriceSequence()).as("check priceSequence").isEqualTo(expected.getPriceSequence()))
            .satisfies(a -> assertThat(a.getPreparationCost()).as("check preparationCost").isEqualTo(expected.getPreparationCost()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBarCodeTransUpdatableRelationshipsEquals(BarCodeTrans expected, BarCodeTrans actual) {
        // empty method
    }
}
