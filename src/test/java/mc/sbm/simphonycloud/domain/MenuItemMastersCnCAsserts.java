package mc.sbm.simphonycloud.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MenuItemMastersCnCAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMenuItemMastersCnCAllPropertiesEquals(MenuItemMastersCnC expected, MenuItemMastersCnC actual) {
        assertMenuItemMastersCnCAutoGeneratedPropertiesEquals(expected, actual);
        assertMenuItemMastersCnCAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMenuItemMastersCnCAllUpdatablePropertiesEquals(MenuItemMastersCnC expected, MenuItemMastersCnC actual) {
        assertMenuItemMastersCnCUpdatableFieldsEquals(expected, actual);
        assertMenuItemMastersCnCUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMenuItemMastersCnCAutoGeneratedPropertiesEquals(MenuItemMastersCnC expected, MenuItemMastersCnC actual) {
        assertThat(actual)
            .as("Verify MenuItemMastersCnC auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMenuItemMastersCnCUpdatableFieldsEquals(MenuItemMastersCnC expected, MenuItemMastersCnC actual) {
        assertThat(actual)
            .as("Verify MenuItemMastersCnC relevant properties")
            .satisfies(a -> assertThat(a.getHierUnitId()).as("check hierUnitId").isEqualTo(expected.getHierUnitId()))
            .satisfies(a -> assertThat(a.getMenuItemMasterId()).as("check menuItemMasterId").isEqualTo(expected.getMenuItemMasterId()))
            .satisfies(a ->
                assertThat(a.getFamilyGroupObjectNum()).as("check familyGroupObjectNum").isEqualTo(expected.getFamilyGroupObjectNum())
            )
            .satisfies(a ->
                assertThat(a.getMajorGroupObjectNum()).as("check majorGroupObjectNum").isEqualTo(expected.getMajorGroupObjectNum())
            )
            .satisfies(a ->
                assertThat(a.getReportGroupObjectNum()).as("check reportGroupObjectNum").isEqualTo(expected.getReportGroupObjectNum())
            )
            .satisfies(a -> assertThat(a.getExternalReference1()).as("check externalReference1").isEqualTo(expected.getExternalReference1())
            )
            .satisfies(a -> assertThat(a.getExternalReference2()).as("check externalReference2").isEqualTo(expected.getExternalReference2())
            )
            .satisfies(a -> assertThat(a.getObjectNum()).as("check objectNum").isEqualTo(expected.getObjectNum()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMenuItemMastersCnCUpdatableRelationshipsEquals(MenuItemMastersCnC expected, MenuItemMastersCnC actual) {
        // empty method
    }
}
