package mc.sbm.simphonycloud.domain;

import static mc.sbm.simphonycloud.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class GuestCheckBIAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGuestCheckBIAllPropertiesEquals(GuestCheckBI expected, GuestCheckBI actual) {
        assertGuestCheckBIAutoGeneratedPropertiesEquals(expected, actual);
        assertGuestCheckBIAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGuestCheckBIAllUpdatablePropertiesEquals(GuestCheckBI expected, GuestCheckBI actual) {
        assertGuestCheckBIUpdatableFieldsEquals(expected, actual);
        assertGuestCheckBIUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGuestCheckBIAutoGeneratedPropertiesEquals(GuestCheckBI expected, GuestCheckBI actual) {
        assertThat(actual)
            .as("Verify GuestCheckBI auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGuestCheckBIUpdatableFieldsEquals(GuestCheckBI expected, GuestCheckBI actual) {
        assertThat(actual)
            .as("Verify GuestCheckBI relevant properties")
            .satisfies(a -> assertThat(a.getGuestCheckId()).as("check guestCheckId").isEqualTo(expected.getGuestCheckId()))
            .satisfies(a -> assertThat(a.getChkNum()).as("check chkNum").isEqualTo(expected.getChkNum()))
            .satisfies(a -> assertThat(a.getOpnLcl()).as("check opnLcl").isEqualTo(expected.getOpnLcl()))
            .satisfies(a -> assertThat(a.getClsdLcl()).as("check clsdLcl").isEqualTo(expected.getClsdLcl()))
            .satisfies(a -> assertThat(a.getCancelFlag()).as("check cancelFlag").isEqualTo(expected.getCancelFlag()))
            .satisfies(a -> assertThat(a.getGstCnt()).as("check gstCnt").isEqualTo(expected.getGstCnt()))
            .satisfies(a -> assertThat(a.getTblNum()).as("check tblNum").isEqualTo(expected.getTblNum()))
            .satisfies(a ->
                assertThat(a.getTaxCollTtl())
                    .as("check taxCollTtl")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTaxCollTtl())
            )
            .satisfies(a ->
                assertThat(a.getSubTtl()).as("check subTtl").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getSubTtl())
            )
            .satisfies(a ->
                assertThat(a.getChkTtl()).as("check chkTtl").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getChkTtl())
            )
            .satisfies(a ->
                assertThat(a.getSvcChgTtl()).as("check svcChgTtl").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getSvcChgTtl())
            )
            .satisfies(a ->
                assertThat(a.getTipTotal()).as("check tipTotal").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getTipTotal())
            )
            .satisfies(a ->
                assertThat(a.getDscTtl()).as("check dscTtl").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getDscTtl())
            )
            .satisfies(a ->
                assertThat(a.getErrorCorrectTtl())
                    .as("check errorCorrectTtl")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getErrorCorrectTtl())
            )
            .satisfies(a ->
                assertThat(a.getReturnTtl()).as("check returnTtl").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getReturnTtl())
            )
            .satisfies(a -> assertThat(a.getXferToChkNum()).as("check xferToChkNum").isEqualTo(expected.getXferToChkNum()))
            .satisfies(a -> assertThat(a.getXferStatus()).as("check xferStatus").isEqualTo(expected.getXferStatus()))
            .satisfies(a -> assertThat(a.getOtNum()).as("check otNum").isEqualTo(expected.getOtNum()))
            .satisfies(a -> assertThat(a.getLocRef()).as("check locRef").isEqualTo(expected.getLocRef()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGuestCheckBIUpdatableRelationshipsEquals(GuestCheckBI expected, GuestCheckBI actual) {
        // empty method
    }
}
