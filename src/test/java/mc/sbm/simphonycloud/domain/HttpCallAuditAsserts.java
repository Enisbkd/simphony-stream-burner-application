package mc.sbm.simphonycloud.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class HttpCallAuditAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHttpCallAuditAllPropertiesEquals(HttpCallAudit expected, HttpCallAudit actual) {
        assertHttpCallAuditAutoGeneratedPropertiesEquals(expected, actual);
        assertHttpCallAuditAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHttpCallAuditAllUpdatablePropertiesEquals(HttpCallAudit expected, HttpCallAudit actual) {
        assertHttpCallAuditUpdatableFieldsEquals(expected, actual);
        assertHttpCallAuditUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHttpCallAuditAutoGeneratedPropertiesEquals(HttpCallAudit expected, HttpCallAudit actual) {
        assertThat(actual)
            .as("Verify HttpCallAudit auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHttpCallAuditUpdatableFieldsEquals(HttpCallAudit expected, HttpCallAudit actual) {
        assertThat(actual)
            .as("Verify HttpCallAudit relevant properties")
            .satisfies(a -> assertThat(a.getCorrelationId()).as("check correlationId").isEqualTo(expected.getCorrelationId()))
            .satisfies(a -> assertThat(a.getMethod()).as("check method").isEqualTo(expected.getMethod()))
            .satisfies(a -> assertThat(a.getBasePath()).as("check basePath").isEqualTo(expected.getBasePath()))
            .satisfies(a -> assertThat(a.getEndpoint()).as("check endpoint").isEqualTo(expected.getEndpoint()))
            .satisfies(a -> assertThat(a.getFullUrl()).as("check fullUrl").isEqualTo(expected.getFullUrl()))
            .satisfies(a -> assertThat(a.getPathParams()).as("check pathParams").isEqualTo(expected.getPathParams()))
            .satisfies(a -> assertThat(a.getQueryParams()).as("check queryParams").isEqualTo(expected.getQueryParams()))
            .satisfies(a -> assertThat(a.getRequestHeaders()).as("check requestHeaders").isEqualTo(expected.getRequestHeaders()))
            .satisfies(a -> assertThat(a.getRequestBody()).as("check requestBody").isEqualTo(expected.getRequestBody()))
            .satisfies(a -> assertThat(a.getResponseStatusCode()).as("check responseStatusCode").isEqualTo(expected.getResponseStatusCode())
            )
            .satisfies(a -> assertThat(a.getResponseStatusText()).as("check responseStatusText").isEqualTo(expected.getResponseStatusText())
            )
            .satisfies(a -> assertThat(a.getResponseHeaders()).as("check responseHeaders").isEqualTo(expected.getResponseHeaders()))
            .satisfies(a -> assertThat(a.getResponseBody()).as("check responseBody").isEqualTo(expected.getResponseBody()))
            .satisfies(a -> assertThat(a.getTimestamp()).as("check timestamp").isEqualTo(expected.getTimestamp()))
            .satisfies(a -> assertThat(a.getDurationMs()).as("check durationMs").isEqualTo(expected.getDurationMs()))
            .satisfies(a -> assertThat(a.getErrorMessage()).as("check errorMessage").isEqualTo(expected.getErrorMessage()))
            .satisfies(a -> assertThat(a.getErrorType()).as("check errorType").isEqualTo(expected.getErrorType()))
            .satisfies(a -> assertThat(a.getServiceName()).as("check serviceName").isEqualTo(expected.getServiceName()))
            .satisfies(a -> assertThat(a.getEnvironment()).as("check environment").isEqualTo(expected.getEnvironment()))
            .satisfies(a -> assertThat(a.getUserAgent()).as("check userAgent").isEqualTo(expected.getUserAgent()))
            .satisfies(a -> assertThat(a.getClientIp()).as("check clientIp").isEqualTo(expected.getClientIp()))
            .satisfies(a -> assertThat(a.getSuccess()).as("check success").isEqualTo(expected.getSuccess()))
            .satisfies(a -> assertThat(a.getRetryCount()).as("check retryCount").isEqualTo(expected.getRetryCount()))
            .satisfies(a -> assertThat(a.getKafkaTopic()).as("check kafkaTopic").isEqualTo(expected.getKafkaTopic()))
            .satisfies(a -> assertThat(a.getSessionId()).as("check sessionId").isEqualTo(expected.getSessionId()))
            .satisfies(a -> assertThat(a.getUserId()).as("check userId").isEqualTo(expected.getUserId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHttpCallAuditUpdatableRelationshipsEquals(HttpCallAudit expected, HttpCallAudit actual) {
        // empty method
    }
}
