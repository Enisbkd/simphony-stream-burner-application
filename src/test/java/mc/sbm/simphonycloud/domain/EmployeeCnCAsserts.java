package mc.sbm.simphonycloud.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EmployeeCnCAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeCnCAllPropertiesEquals(EmployeeCnC expected, EmployeeCnC actual) {
        assertEmployeeCnCAutoGeneratedPropertiesEquals(expected, actual);
        assertEmployeeCnCAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeCnCAllUpdatablePropertiesEquals(EmployeeCnC expected, EmployeeCnC actual) {
        assertEmployeeCnCUpdatableFieldsEquals(expected, actual);
        assertEmployeeCnCUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeCnCAutoGeneratedPropertiesEquals(EmployeeCnC expected, EmployeeCnC actual) {
        assertThat(actual)
            .as("Verify EmployeeCnC auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeCnCUpdatableFieldsEquals(EmployeeCnC expected, EmployeeCnC actual) {
        assertThat(actual)
            .as("Verify EmployeeCnC relevant properties")
            .satisfies(a -> assertThat(a.getObjectNum()).as("check objectNum").isEqualTo(expected.getObjectNum()))
            .satisfies(a -> assertThat(a.getFirstName()).as("check firstName").isEqualTo(expected.getFirstName()))
            .satisfies(a -> assertThat(a.getLastName()).as("check lastName").isEqualTo(expected.getLastName()))
            .satisfies(a -> assertThat(a.getCheckName()).as("check checkName").isEqualTo(expected.getCheckName()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getLanguageObjNum()).as("check languageObjNum").isEqualTo(expected.getLanguageObjNum()))
            .satisfies(a -> assertThat(a.getLangId()).as("check langId").isEqualTo(expected.getLangId()))
            .satisfies(a -> assertThat(a.getAlternateId()).as("check alternateId").isEqualTo(expected.getAlternateId()))
            .satisfies(a -> assertThat(a.getLevel()).as("check level").isEqualTo(expected.getLevel()))
            .satisfies(a -> assertThat(a.getGroup()).as("check group").isEqualTo(expected.getGroup()))
            .satisfies(a -> assertThat(a.getUserName()).as("check userName").isEqualTo(expected.getUserName()))
            .satisfies(a ->
                assertThat(a.getFirstRoleHierUnitId()).as("check firstRoleHierUnitId").isEqualTo(expected.getFirstRoleHierUnitId())
            )
            .satisfies(a -> assertThat(a.getFirstRoleObjNum()).as("check firstRoleObjNum").isEqualTo(expected.getFirstRoleObjNum()))
            .satisfies(a ->
                assertThat(a.getFirstVisibilityHierUnitId())
                    .as("check firstVisibilityHierUnitId")
                    .isEqualTo(expected.getFirstVisibilityHierUnitId())
            )
            .satisfies(a ->
                assertThat(a.getFirstVisibilityPropagateToChildren())
                    .as("check firstVisibilityPropagateToChildren")
                    .isEqualTo(expected.getFirstVisibilityPropagateToChildren())
            )
            .satisfies(a ->
                assertThat(a.getFirstPropertyHierUnitId())
                    .as("check firstPropertyHierUnitId")
                    .isEqualTo(expected.getFirstPropertyHierUnitId())
            )
            .satisfies(a ->
                assertThat(a.getFirstPropertyObjNum()).as("check firstPropertyObjNum").isEqualTo(expected.getFirstPropertyObjNum())
            )
            .satisfies(a ->
                assertThat(a.getFirstPropertyEmpClassObjNum())
                    .as("check firstPropertyEmpClassObjNum")
                    .isEqualTo(expected.getFirstPropertyEmpClassObjNum())
            )
            .satisfies(a ->
                assertThat(a.getFirstPropertyOptions()).as("check firstPropertyOptions").isEqualTo(expected.getFirstPropertyOptions())
            )
            .satisfies(a ->
                assertThat(a.getFirstOperatorRvcHierUnitId())
                    .as("check firstOperatorRvcHierUnitId")
                    .isEqualTo(expected.getFirstOperatorRvcHierUnitId())
            )
            .satisfies(a ->
                assertThat(a.getFirstOperatorRvcObjNum()).as("check firstOperatorRvcObjNum").isEqualTo(expected.getFirstOperatorRvcObjNum())
            )
            .satisfies(a ->
                assertThat(a.getFirstOperatorOptions()).as("check firstOperatorOptions").isEqualTo(expected.getFirstOperatorOptions())
            )
            .satisfies(a ->
                assertThat(a.getFirstOperatorCashDrawerObjNum())
                    .as("check firstOperatorCashDrawerObjNum")
                    .isEqualTo(expected.getFirstOperatorCashDrawerObjNum())
            )
            .satisfies(a ->
                assertThat(a.getFirstOperatorTmsColorObjNum())
                    .as("check firstOperatorTmsColorObjNum")
                    .isEqualTo(expected.getFirstOperatorTmsColorObjNum())
            )
            .satisfies(a ->
                assertThat(a.getFirstOperatorServerEfficiency())
                    .as("check firstOperatorServerEfficiency")
                    .isEqualTo(expected.getFirstOperatorServerEfficiency())
            )
            .satisfies(a -> assertThat(a.getPin()).as("check pin").isEqualTo(expected.getPin()))
            .satisfies(a -> assertThat(a.getAccessId()).as("check accessId").isEqualTo(expected.getAccessId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeCnCUpdatableRelationshipsEquals(EmployeeCnC expected, EmployeeCnC actual) {
        // empty method
    }
}
