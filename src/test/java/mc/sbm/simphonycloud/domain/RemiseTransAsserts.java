package mc.sbm.simphonycloud.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RemiseTransAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRemiseTransAllPropertiesEquals(RemiseTrans expected, RemiseTrans actual) {
        assertRemiseTransAutoGeneratedPropertiesEquals(expected, actual);
        assertRemiseTransAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRemiseTransAllUpdatablePropertiesEquals(RemiseTrans expected, RemiseTrans actual) {
        assertRemiseTransUpdatableFieldsEquals(expected, actual);
        assertRemiseTransUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRemiseTransAutoGeneratedPropertiesEquals(RemiseTrans expected, RemiseTrans actual) {
        assertThat(actual)
            .as("Verify RemiseTrans auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRemiseTransUpdatableFieldsEquals(RemiseTrans expected, RemiseTrans actual) {
        assertThat(actual)
            .as("Verify RemiseTrans relevant properties")
            .satisfies(a -> assertThat(a.getOrgShortName()).as("check orgShortName").isEqualTo(expected.getOrgShortName()))
            .satisfies(a -> assertThat(a.getLocRef()).as("check locRef").isEqualTo(expected.getLocRef()))
            .satisfies(a -> assertThat(a.getRvcRef()).as("check rvcRef").isEqualTo(expected.getRvcRef()))
            .satisfies(a -> assertThat(a.getDiscountId()).as("check discountId").isEqualTo(expected.getDiscountId()))
            .satisfies(a -> assertThat(a.getFrName()).as("check frName").isEqualTo(expected.getFrName()))
            .satisfies(a -> assertThat(a.getEngName()).as("check engName").isEqualTo(expected.getEngName()))
            .satisfies(a -> assertThat(a.getDiscountType()).as("check discountType").isEqualTo(expected.getDiscountType()))
            .satisfies(a -> assertThat(a.getDiscountValue()).as("check discountValue").isEqualTo(expected.getDiscountValue()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRemiseTransUpdatableRelationshipsEquals(RemiseTrans expected, RemiseTrans actual) {
        // empty method
    }
}
