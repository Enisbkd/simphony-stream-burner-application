package mc.sbm.simphonycloud.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CommissionServiceBIAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommissionServiceBIAllPropertiesEquals(CommissionServiceBI expected, CommissionServiceBI actual) {
        assertCommissionServiceBIAutoGeneratedPropertiesEquals(expected, actual);
        assertCommissionServiceBIAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommissionServiceBIAllUpdatablePropertiesEquals(CommissionServiceBI expected, CommissionServiceBI actual) {
        assertCommissionServiceBIUpdatableFieldsEquals(expected, actual);
        assertCommissionServiceBIUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommissionServiceBIAutoGeneratedPropertiesEquals(CommissionServiceBI expected, CommissionServiceBI actual) {
        assertThat(actual)
            .as("Verify CommissionServiceBI auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommissionServiceBIUpdatableFieldsEquals(CommissionServiceBI expected, CommissionServiceBI actual) {
        assertThat(actual)
            .as("Verify CommissionServiceBI relevant properties")
            .satisfies(a -> assertThat(a.getNom()).as("check nom").isEqualTo(expected.getNom()))
            .satisfies(a -> assertThat(a.getNomCourt()).as("check nomCourt").isEqualTo(expected.getNomCourt()))
            .satisfies(a -> assertThat(a.getTypeValue()).as("check typeValue").isEqualTo(expected.getTypeValue()))
            .satisfies(a -> assertThat(a.getValue()).as("check value").isEqualTo(expected.getValue()))
            .satisfies(a -> assertThat(a.getEtablissementRef()).as("check etablissementRef").isEqualTo(expected.getEtablissementRef()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommissionServiceBIUpdatableRelationshipsEquals(CommissionServiceBI expected, CommissionServiceBI actual) {
        // empty method
    }
}
