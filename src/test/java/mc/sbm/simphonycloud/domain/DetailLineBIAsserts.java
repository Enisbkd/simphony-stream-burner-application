package mc.sbm.simphonycloud.domain;

import static mc.sbm.simphonycloud.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class DetailLineBIAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDetailLineBIAllPropertiesEquals(DetailLineBI expected, DetailLineBI actual) {
        assertDetailLineBIAutoGeneratedPropertiesEquals(expected, actual);
        assertDetailLineBIAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDetailLineBIAllUpdatablePropertiesEquals(DetailLineBI expected, DetailLineBI actual) {
        assertDetailLineBIUpdatableFieldsEquals(expected, actual);
        assertDetailLineBIUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDetailLineBIAutoGeneratedPropertiesEquals(DetailLineBI expected, DetailLineBI actual) {
        assertThat(actual)
            .as("Verify DetailLineBI auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDetailLineBIUpdatableFieldsEquals(DetailLineBI expected, DetailLineBI actual) {
        assertThat(actual)
            .as("Verify DetailLineBI relevant properties")
            .satisfies(a ->
                assertThat(a.getGuestCheckLineItemId()).as("check guestCheckLineItemId").isEqualTo(expected.getGuestCheckLineItemId())
            )
            .satisfies(a -> assertThat(a.getDetailUTC()).as("check detailUTC").isEqualTo(expected.getDetailUTC()))
            .satisfies(a -> assertThat(a.getDetailLcl()).as("check detailLcl").isEqualTo(expected.getDetailLcl()))
            .satisfies(a -> assertThat(a.getSeatNum()).as("check seatNum").isEqualTo(expected.getSeatNum()))
            .satisfies(a -> assertThat(a.getPrcLvl()).as("check prcLvl").isEqualTo(expected.getPrcLvl()))
            .satisfies(a ->
                assertThat(a.getDspTtl()).as("check dspTtl").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getDspTtl())
            )
            .satisfies(a -> assertThat(a.getDspQty()).as("check dspQty").isEqualTo(expected.getDspQty()))
            .satisfies(a -> assertThat(a.getErrCorFlag()).as("check errCorFlag").isEqualTo(expected.getErrCorFlag()))
            .satisfies(a -> assertThat(a.getVdFlag()).as("check vdFlag").isEqualTo(expected.getVdFlag()))
            .satisfies(a -> assertThat(a.getReturnFlag()).as("check returnFlag").isEqualTo(expected.getReturnFlag()))
            .satisfies(a -> assertThat(a.getDoNotShowFlag()).as("check doNotShowFlag").isEqualTo(expected.getDoNotShowFlag()))
            .satisfies(a ->
                assertThat(a.getAggTtl()).as("check aggTtl").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getAggTtl())
            )
            .satisfies(a -> assertThat(a.getRsnCodeNum()).as("check rsnCodeNum").isEqualTo(expected.getRsnCodeNum()))
            .satisfies(a -> assertThat(a.getRefInfo1()).as("check refInfo1").isEqualTo(expected.getRefInfo1()))
            .satisfies(a -> assertThat(a.getRefInfo2()).as("check refInfo2").isEqualTo(expected.getRefInfo2()))
            .satisfies(a -> assertThat(a.getSvcRndNum()).as("check svcRndNum").isEqualTo(expected.getSvcRndNum()))
            .satisfies(a -> assertThat(a.getParDtlId()).as("check parDtlId").isEqualTo(expected.getParDtlId()))
            .satisfies(a -> assertThat(a.getChkEmpId()).as("check chkEmpId").isEqualTo(expected.getChkEmpId()))
            .satisfies(a -> assertThat(a.getTransEmpNum()).as("check transEmpNum").isEqualTo(expected.getTransEmpNum()))
            .satisfies(a -> assertThat(a.getMgrEmpNum()).as("check mgrEmpNum").isEqualTo(expected.getMgrEmpNum()))
            .satisfies(a -> assertThat(a.getMealEmpNum()).as("check mealEmpNum").isEqualTo(expected.getMealEmpNum()))
            .satisfies(a -> assertThat(a.getDscNum()).as("check dscNum").isEqualTo(expected.getDscNum()))
            .satisfies(a -> assertThat(a.getDscMiNum()).as("check dscMiNum").isEqualTo(expected.getDscMiNum()))
            .satisfies(a -> assertThat(a.getSvcChgNum()).as("check svcChgNum").isEqualTo(expected.getSvcChgNum()))
            .satisfies(a -> assertThat(a.getTmedNum()).as("check tmedNum").isEqualTo(expected.getTmedNum()))
            .satisfies(a -> assertThat(a.getMiNum()).as("check miNum").isEqualTo(expected.getMiNum()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDetailLineBIUpdatableRelationshipsEquals(DetailLineBI expected, DetailLineBI actual) {
        assertThat(actual)
            .as("Verify DetailLineBI relationships")
            .satisfies(a -> assertThat(a.getGuestCheckBI()).as("check guestCheckBI").isEqualTo(expected.getGuestCheckBI()));
    }
}
