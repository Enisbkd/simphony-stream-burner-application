package mc.sbm.simphonycloud.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CommissionServiceTransAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommissionServiceTransAllPropertiesEquals(CommissionServiceTrans expected, CommissionServiceTrans actual) {
        assertCommissionServiceTransAutoGeneratedPropertiesEquals(expected, actual);
        assertCommissionServiceTransAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommissionServiceTransAllUpdatablePropertiesEquals(
        CommissionServiceTrans expected,
        CommissionServiceTrans actual
    ) {
        assertCommissionServiceTransUpdatableFieldsEquals(expected, actual);
        assertCommissionServiceTransUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommissionServiceTransAutoGeneratedPropertiesEquals(
        CommissionServiceTrans expected,
        CommissionServiceTrans actual
    ) {
        assertThat(actual)
            .as("Verify CommissionServiceTrans auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommissionServiceTransUpdatableFieldsEquals(CommissionServiceTrans expected, CommissionServiceTrans actual) {
        assertThat(actual)
            .as("Verify CommissionServiceTrans relevant properties")
            .satisfies(a -> assertThat(a.getOrgShortName()).as("check orgShortName").isEqualTo(expected.getOrgShortName()))
            .satisfies(a -> assertThat(a.getLocRef()).as("check locRef").isEqualTo(expected.getLocRef()))
            .satisfies(a -> assertThat(a.getRvcRef()).as("check rvcRef").isEqualTo(expected.getRvcRef()))
            .satisfies(a -> assertThat(a.getServiceChargeId()).as("check serviceChargeId").isEqualTo(expected.getServiceChargeId()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getValue()).as("check value").isEqualTo(expected.getValue()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommissionServiceTransUpdatableRelationshipsEquals(
        CommissionServiceTrans expected,
        CommissionServiceTrans actual
    ) {
        // empty method
    }
}
