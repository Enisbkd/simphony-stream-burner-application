package mc.sbm.simphonycloud.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PointDeVenteTransAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPointDeVenteTransAllPropertiesEquals(PointDeVenteTrans expected, PointDeVenteTrans actual) {
        assertPointDeVenteTransAutoGeneratedPropertiesEquals(expected, actual);
        assertPointDeVenteTransAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPointDeVenteTransAllUpdatablePropertiesEquals(PointDeVenteTrans expected, PointDeVenteTrans actual) {
        assertPointDeVenteTransUpdatableFieldsEquals(expected, actual);
        assertPointDeVenteTransUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPointDeVenteTransAutoGeneratedPropertiesEquals(PointDeVenteTrans expected, PointDeVenteTrans actual) {
        assertThat(actual)
            .as("Verify PointDeVenteTrans auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPointDeVenteTransUpdatableFieldsEquals(PointDeVenteTrans expected, PointDeVenteTrans actual) {
        assertThat(actual)
            .as("Verify PointDeVenteTrans relevant properties")
            .satisfies(a -> assertThat(a.getRvcRef()).as("check rvcRef").isEqualTo(expected.getRvcRef()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getLocRef()).as("check locRef").isEqualTo(expected.getLocRef()))
            .satisfies(a -> assertThat(a.getOrgShortName()).as("check orgShortName").isEqualTo(expected.getOrgShortName()))
            .satisfies(a -> assertThat(a.getAddress()).as("check address").isEqualTo(expected.getAddress()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPointDeVenteTransUpdatableRelationshipsEquals(PointDeVenteTrans expected, PointDeVenteTrans actual) {
        // empty method
    }
}
