package mc.sbm.simphonycloud.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MenuItemDefinitionsCnCAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMenuItemDefinitionsCnCAllPropertiesEquals(MenuItemDefinitionsCnC expected, MenuItemDefinitionsCnC actual) {
        assertMenuItemDefinitionsCnCAutoGeneratedPropertiesEquals(expected, actual);
        assertMenuItemDefinitionsCnCAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMenuItemDefinitionsCnCAllUpdatablePropertiesEquals(
        MenuItemDefinitionsCnC expected,
        MenuItemDefinitionsCnC actual
    ) {
        assertMenuItemDefinitionsCnCUpdatableFieldsEquals(expected, actual);
        assertMenuItemDefinitionsCnCUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMenuItemDefinitionsCnCAutoGeneratedPropertiesEquals(
        MenuItemDefinitionsCnC expected,
        MenuItemDefinitionsCnC actual
    ) {
        assertThat(actual)
            .as("Verify MenuItemDefinitionsCnC auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMenuItemDefinitionsCnCUpdatableFieldsEquals(MenuItemDefinitionsCnC expected, MenuItemDefinitionsCnC actual) {
        assertThat(actual)
            .as("Verify MenuItemDefinitionsCnC relevant properties")
            .satisfies(a -> assertThat(a.getHierUnitId()).as("check hierUnitId").isEqualTo(expected.getHierUnitId()))
            .satisfies(a ->
                assertThat(a.getMenuItemMasterObjNum()).as("check menuItemMasterObjNum").isEqualTo(expected.getMenuItemMasterObjNum())
            )
            .satisfies(a -> assertThat(a.getMenuItemMasterId()).as("check menuItemMasterId").isEqualTo(expected.getMenuItemMasterId()))
            .satisfies(a ->
                assertThat(a.getMenuItemDefinitionId()).as("check menuItemDefinitionId").isEqualTo(expected.getMenuItemDefinitionId())
            )
            .satisfies(a -> assertThat(a.getDefSequenceNum()).as("check defSequenceNum").isEqualTo(expected.getDefSequenceNum()))
            .satisfies(a ->
                assertThat(a.getMenuItemClassObjNum()).as("check menuItemClassObjNum").isEqualTo(expected.getMenuItemClassObjNum())
            )
            .satisfies(a ->
                assertThat(a.getOverridePrintClassObjNum())
                    .as("check overridePrintClassObjNum")
                    .isEqualTo(expected.getOverridePrintClassObjNum())
            )
            .satisfies(a -> assertThat(a.getMainLevel()).as("check mainLevel").isEqualTo(expected.getMainLevel()))
            .satisfies(a -> assertThat(a.getSubLevel()).as("check subLevel").isEqualTo(expected.getSubLevel()))
            .satisfies(a -> assertThat(a.getQuantity()).as("check quantity").isEqualTo(expected.getQuantity()))
            .satisfies(a -> assertThat(a.getKdsPrepTime()).as("check kdsPrepTime").isEqualTo(expected.getKdsPrepTime()))
            .satisfies(a ->
                assertThat(a.getPrefixLevelOverride()).as("check prefixLevelOverride").isEqualTo(expected.getPrefixLevelOverride())
            )
            .satisfies(a -> assertThat(a.getGuestCount()).as("check guestCount").isEqualTo(expected.getGuestCount()))
            .satisfies(a -> assertThat(a.getSlu1ObjNum()).as("check slu1ObjNum").isEqualTo(expected.getSlu1ObjNum()))
            .satisfies(a -> assertThat(a.getSlu2ObjNum()).as("check slu2ObjNum").isEqualTo(expected.getSlu2ObjNum()))
            .satisfies(a -> assertThat(a.getSlu3ObjNum()).as("check slu3ObjNum").isEqualTo(expected.getSlu3ObjNum()))
            .satisfies(a -> assertThat(a.getSlu4ObjNum()).as("check slu4ObjNum").isEqualTo(expected.getSlu4ObjNum()))
            .satisfies(a -> assertThat(a.getSlu5ObjNum()).as("check slu5ObjNum").isEqualTo(expected.getSlu5ObjNum()))
            .satisfies(a -> assertThat(a.getSlu6ObjNum()).as("check slu6ObjNum").isEqualTo(expected.getSlu6ObjNum()))
            .satisfies(a -> assertThat(a.getSlu7ObjNum()).as("check slu7ObjNum").isEqualTo(expected.getSlu7ObjNum()))
            .satisfies(a -> assertThat(a.getSlu8ObjNum()).as("check slu8ObjNum").isEqualTo(expected.getSlu8ObjNum()))
            .satisfies(a -> assertThat(a.getFirstName()).as("check firstName").isEqualTo(expected.getFirstName()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMenuItemDefinitionsCnCUpdatableRelationshipsEquals(
        MenuItemDefinitionsCnC expected,
        MenuItemDefinitionsCnC actual
    ) {
        // empty method
    }
}
