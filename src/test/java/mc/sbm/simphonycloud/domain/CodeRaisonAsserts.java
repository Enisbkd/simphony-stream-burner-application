package mc.sbm.simphonycloud.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CodeRaisonAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCodeRaisonAllPropertiesEquals(CodeRaison expected, CodeRaison actual) {
        assertCodeRaisonAutoGeneratedPropertiesEquals(expected, actual);
        assertCodeRaisonAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCodeRaisonAllUpdatablePropertiesEquals(CodeRaison expected, CodeRaison actual) {
        assertCodeRaisonUpdatableFieldsEquals(expected, actual);
        assertCodeRaisonUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCodeRaisonAutoGeneratedPropertiesEquals(CodeRaison expected, CodeRaison actual) {
        assertThat(actual)
            .as("Verify CodeRaison auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCodeRaisonUpdatableFieldsEquals(CodeRaison expected, CodeRaison actual) {
        assertThat(actual)
            .as("Verify CodeRaison relevant properties")
            .satisfies(a -> assertThat(a.getNomCourt()).as("check nomCourt").isEqualTo(expected.getNomCourt()))
            .satisfies(a -> assertThat(a.getNomMstr()).as("check nomMstr").isEqualTo(expected.getNomMstr()))
            .satisfies(a -> assertThat(a.getNumMstr()).as("check numMstr").isEqualTo(expected.getNumMstr()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getEtablissementRef()).as("check etablissementRef").isEqualTo(expected.getEtablissementRef()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCodeRaisonUpdatableRelationshipsEquals(CodeRaison expected, CodeRaison actual) {
        // empty method
    }
}
