package mc.sbm.simphonycloud.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PointDeVenteCnCAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPointDeVenteCnCAllPropertiesEquals(PointDeVenteCnC expected, PointDeVenteCnC actual) {
        assertPointDeVenteCnCAutoGeneratedPropertiesEquals(expected, actual);
        assertPointDeVenteCnCAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPointDeVenteCnCAllUpdatablePropertiesEquals(PointDeVenteCnC expected, PointDeVenteCnC actual) {
        assertPointDeVenteCnCUpdatableFieldsEquals(expected, actual);
        assertPointDeVenteCnCUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPointDeVenteCnCAutoGeneratedPropertiesEquals(PointDeVenteCnC expected, PointDeVenteCnC actual) {
        assertThat(actual)
            .as("Verify PointDeVenteCnC auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPointDeVenteCnCUpdatableFieldsEquals(PointDeVenteCnC expected, PointDeVenteCnC actual) {
        assertThat(actual)
            .as("Verify PointDeVenteCnC relevant properties")
            .satisfies(a -> assertThat(a.getLocHierUnitId()).as("check locHierUnitId").isEqualTo(expected.getLocHierUnitId()))
            .satisfies(a -> assertThat(a.getLocObjNum()).as("check locObjNum").isEqualTo(expected.getLocObjNum()))
            .satisfies(a -> assertThat(a.getRvcId()).as("check rvcId").isEqualTo(expected.getRvcId()))
            .satisfies(a -> assertThat(a.getKdsControllerId()).as("check kdsControllerId").isEqualTo(expected.getKdsControllerId()))
            .satisfies(a -> assertThat(a.getHierUnitId()).as("check hierUnitId").isEqualTo(expected.getHierUnitId()))
            .satisfies(a -> assertThat(a.getObjectNum()).as("check objectNum").isEqualTo(expected.getObjectNum()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDataExtensions()).as("check dataExtensions").isEqualTo(expected.getDataExtensions()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPointDeVenteCnCUpdatableRelationshipsEquals(PointDeVenteCnC expected, PointDeVenteCnC actual) {
        // empty method
    }
}
