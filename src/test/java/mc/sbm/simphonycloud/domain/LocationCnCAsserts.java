package mc.sbm.simphonycloud.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LocationCnCAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocationCnCAllPropertiesEquals(LocationCnC expected, LocationCnC actual) {
        assertLocationCnCAutoGeneratedPropertiesEquals(expected, actual);
        assertLocationCnCAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocationCnCAllUpdatablePropertiesEquals(LocationCnC expected, LocationCnC actual) {
        assertLocationCnCUpdatableFieldsEquals(expected, actual);
        assertLocationCnCUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocationCnCAutoGeneratedPropertiesEquals(LocationCnC expected, LocationCnC actual) {
        assertThat(actual)
            .as("Verify LocationCnC auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocationCnCUpdatableFieldsEquals(LocationCnC expected, LocationCnC actual) {
        assertThat(actual)
            .as("Verify LocationCnC relevant properties")
            .satisfies(a -> assertThat(a.getHierUnitId()).as("check hierUnitId").isEqualTo(expected.getHierUnitId()))
            .satisfies(a -> assertThat(a.getTzIndex()).as("check tzIndex").isEqualTo(expected.getTzIndex()))
            .satisfies(a -> assertThat(a.getTzName()).as("check tzName").isEqualTo(expected.getTzName()))
            .satisfies(a -> assertThat(a.getLocaleInfoId()).as("check localeInfoId").isEqualTo(expected.getLocaleInfoId()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getReportingLocName()).as("check reportingLocName").isEqualTo(expected.getReportingLocName()))
            .satisfies(a -> assertThat(a.getLocRef()).as("check locRef").isEqualTo(expected.getLocRef()))
            .satisfies(a ->
                assertThat(a.getReportingParentEnterpriseLevelName())
                    .as("check reportingParentEnterpriseLevelName")
                    .isEqualTo(expected.getReportingParentEnterpriseLevelName())
            )
            .satisfies(a -> assertThat(a.getObjectNum()).as("check objectNum").isEqualTo(expected.getObjectNum()))
            .satisfies(a -> assertThat(a.getSbmPmsIfcIp()).as("check sbmPmsIfcIp").isEqualTo(expected.getSbmPmsIfcIp()))
            .satisfies(a -> assertThat(a.getSbmPmsIfcPort()).as("check sbmPmsIfcPort").isEqualTo(expected.getSbmPmsIfcPort()))
            .satisfies(a -> assertThat(a.getSbmPriveRoomStart()).as("check sbmPriveRoomStart").isEqualTo(expected.getSbmPriveRoomStart()))
            .satisfies(a -> assertThat(a.getSbmPriveRoomEnd()).as("check sbmPriveRoomEnd").isEqualTo(expected.getSbmPriveRoomEnd()))
            .satisfies(a ->
                assertThat(a.getSbmPmsSendAllDetails()).as("check sbmPmsSendAllDetails").isEqualTo(expected.getSbmPmsSendAllDetails())
            )
            .satisfies(a -> assertThat(a.getSbmPmsSendFullDscv()).as("check sbmPmsSendFullDscv").isEqualTo(expected.getSbmPmsSendFullDscv())
            )
            .satisfies(a -> assertThat(a.getSbmPmsSend64Tax()).as("check sbmPmsSend64Tax").isEqualTo(expected.getSbmPmsSend64Tax()))
            .satisfies(a -> assertThat(a.getSbmCardPaymentUrl()).as("check sbmCardPaymentUrl").isEqualTo(expected.getSbmCardPaymentUrl()))
            .satisfies(a ->
                assertThat(a.getSbmCheckHotelDataUrl()).as("check sbmCheckHotelDataUrl").isEqualTo(expected.getSbmCheckHotelDataUrl())
            )
            .satisfies(a -> assertThat(a.getSbmVoucherSvcUrl()).as("check sbmVoucherSvcUrl").isEqualTo(expected.getSbmVoucherSvcUrl()))
            .satisfies(a -> assertThat(a.getSbmVoucherInvPm()).as("check sbmVoucherInvPm").isEqualTo(expected.getSbmVoucherInvPm()))
            .satisfies(a -> assertThat(a.getSbmVoucherCorpPm()).as("check sbmVoucherCorpPm").isEqualTo(expected.getSbmVoucherCorpPm()))
            .satisfies(a -> assertThat(a.getSbmVoucherRewardPm()).as("check sbmVoucherRewardPm").isEqualTo(expected.getSbmVoucherRewardPm())
            )
            .satisfies(a -> assertThat(a.getSbmVoucherMcPm()).as("check sbmVoucherMcPm").isEqualTo(expected.getSbmVoucherMcPm()))
            .satisfies(a -> assertThat(a.getSbmPmsIfcPort2()).as("check sbmPmsIfcPort2").isEqualTo(expected.getSbmPmsIfcPort2()))
            .satisfies(a -> assertThat(a.getSbmPmsIfcPort3()).as("check sbmPmsIfcPort3").isEqualTo(expected.getSbmPmsIfcPort3()))
            .satisfies(a -> assertThat(a.getSbmPmsIfcPort4()).as("check sbmPmsIfcPort4").isEqualTo(expected.getSbmPmsIfcPort4()))
            .satisfies(a -> assertThat(a.getSbmTimeout()).as("check sbmTimeout").isEqualTo(expected.getSbmTimeout()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocationCnCUpdatableRelationshipsEquals(LocationCnC expected, LocationCnC actual) {
        // empty method
    }
}
